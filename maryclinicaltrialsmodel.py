# -*- coding: utf-8 -*-
"""MaryClinicalTrialsModel.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ZGAMH60zmbap7sjpu0KqzxxpLwbwFc3P
"""

#clinical_trial_model.py
import pandas as pd
import sqlite3
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import classification_report
from sklearn.preprocessing import LabelEncoder
import matplotlib.pyplot as plt

print("Loading dataset into SQLite database...")

#Load CSV

from google.colab import files
uploaded = files.upload()
df = pd.read_csv('clinical_trial_dataset_1000.csv')

# Create SQLite connection and write to table
conn = sqlite3.connect("clinical_trials.db")
df.to_sql("trial_data", conn, if_exists="replace", index=False)

# Query test: preview first 5 rows
preview = pd.read_sql("SELECT * FROM trial_data LIMIT 5", conn)
print("\nSample records from database:")
print(preview)
conn.close()

# --- Step 2.1: Load and Preprocess Data for Model Training ---
print("\nPreprocessing data for AI model...")

# Reload data
df = pd.read_csv("clinical_trial_dataset_1000.csv")

# Encode categorical columns
label_cols = ["Gender", "Ethnicity", "Health_Condition", "Comorbidities", "Trial_Phase"]
df[label_cols] = df[label_cols].apply(LabelEncoder().fit_transform)

# Encode target column
df["Dropout_Flag"] = df["Dropout_Flag"].map({"Yes": 1, "No": 0})

# Separate features (X) and target (y)
X = df.drop(["Participant_ID", "Dropout_Flag", "Dropout_Reason"], axis=1)
y = df["Dropout_Flag"]

# Train/test split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# --- Step 2.2: Train the Model ---
print("\nTraining Random Forest model...")
model = RandomForestClassifier(n_estimators=100, random_state=42)
model.fit(X_train, y_train)

# --- Step 2.3: Evaluate the Model ---
print("\nEvaluating model performance...")
y_pred = model.predict(X_test)
print(classification_report(y_test, y_pred))

# --- Feature Importance Visualization ---
print("\nVisualizing feature importance...")
feature_importances = pd.Series(model.feature_importances_, index=X.columns)
feature_importances.sort_values().plot(kind='barh', figsize=(10, 6), title='Feature Importance')
plt.tight_layout()
plt.show()